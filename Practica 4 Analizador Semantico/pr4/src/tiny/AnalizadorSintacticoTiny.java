
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Wed Jul 23 12:23:44 CEST 2014
//----------------------------------------------------

package tiny;

import java_cup.runtime.*;
import java.util.*;

import constructoras.*;
import expresiones.*;
import instrucciones.*;
import operadores.*;
import tipos.*;


/** CUP v0.11b beta 20140220 generated parser.
  * @version Wed Jul 23 12:23:44 CEST 2014
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\002\007\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\004\000\002\004\002" +
    "\000\002\005\004\000\002\005\002\000\002\006\005\000" +
    "\002\006\003\000\002\011\005\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\007\000\002\012\006\000\002\012\004\000\002\013\005" +
    "\000\002\013\003\000\002\014\005\000\002\007\005\000" +
    "\002\007\003\000\002\015\005\000\002\010\005\000\002" +
    "\010\003\000\002\016\011\000\002\017\005\000\002\017" +
    "\004\000\002\020\005\000\002\020\003\000\002\021\005" +
    "\000\002\021\006\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\023\005\000\002\026\005\000\002\026\004" +
    "\000\002\042\005\000\002\042\003\000\002\024\005\000" +
    "\002\043\006\000\002\043\003\000\002\044\005\000\002" +
    "\025\005\000\002\027\004\000\002\030\004\000\002\031" +
    "\004\000\002\032\004\000\002\033\004\000\002\045\005" +
    "\000\002\045\004\000\002\046\005\000\002\046\003\000" +
    "\002\034\003\000\002\034\006\000\002\034\005\000\002" +
    "\034\004\000\002\035\005\000\002\035\003\000\002\036" +
    "\005\000\002\036\003\000\002\037\005\000\002\037\003" +
    "\000\002\040\004\000\002\040\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\005\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\047\003\000\002\047\003" +
    "\000\002\047\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\051\003\000\002\051\003\000\002" +
    "\051\003\000\002\051\003\000\002\052\003\000\002\052" +
    "\003\000\002\052\003\000\002\052\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\004\004\005\001\002\000\004\002\246\001" +
    "\002\000\012\005\007\010\ufffe\011\ufffe\044\ufffe\001\002" +
    "\000\010\010\045\011\ufffc\044\ufffc\001\002\000\004\070" +
    "\010\001\002\000\004\046\015\001\002\000\012\010\ufff8" +
    "\011\ufff8\040\ufff8\044\ufff8\001\002\000\012\010\uffff\011" +
    "\uffff\040\013\044\uffff\001\002\000\004\070\010\001\002" +
    "\000\012\010\ufff9\011\ufff9\040\ufff9\044\ufff9\001\002\000" +
    "\020\006\022\007\021\047\024\050\023\051\020\061\025" +
    "\070\016\001\002\000\022\010\ufff3\011\ufff3\040\ufff3\041" +
    "\ufff3\043\ufff3\044\ufff3\045\ufff3\052\ufff3\001\002\000\012" +
    "\010\ufff7\011\ufff7\040\ufff7\044\ufff7\001\002\000\022\010" +
    "\ufff5\011\ufff5\040\ufff5\041\ufff5\043\ufff5\044\ufff5\045\ufff5" +
    "\052\ufff5\001\002\000\020\006\022\007\021\047\024\050" +
    "\023\051\020\061\025\070\016\001\002\000\004\044\032" +
    "\001\002\000\022\010\ufff4\011\ufff4\040\ufff4\041\ufff4\043" +
    "\ufff4\044\ufff4\045\ufff4\052\ufff4\001\002\000\022\010\ufff6" +
    "\011\ufff6\040\ufff6\041\ufff6\043\ufff6\044\ufff6\045\ufff6\052" +
    "\ufff6\001\002\000\020\006\022\007\021\047\024\050\023" +
    "\051\020\061\025\070\016\001\002\000\004\052\027\001" +
    "\002\000\004\066\030\001\002\000\004\053\031\001\002" +
    "\000\022\010\ufff2\011\ufff2\040\ufff2\041\ufff2\043\ufff2\044" +
    "\ufff2\045\ufff2\052\ufff2\001\002\000\004\070\033\001\002" +
    "\000\004\046\041\001\002\000\006\040\037\045\036\001" +
    "\002\000\006\040\uffee\045\uffee\001\002\000\022\010\ufff1" +
    "\011\ufff1\040\ufff1\041\ufff1\043\ufff1\044\ufff1\045\ufff1\052" +
    "\ufff1\001\002\000\004\070\033\001\002\000\006\040\uffef" +
    "\045\uffef\001\002\000\020\006\022\007\021\047\024\050" +
    "\023\051\020\061\025\070\016\001\002\000\006\040\uffed" +
    "\045\uffed\001\002\000\022\010\ufff0\011\ufff0\040\ufff0\041" +
    "\ufff0\043\ufff0\044\ufff0\045\ufff0\052\ufff0\001\002\000\006" +
    "\011\056\044\ufffa\001\002\000\004\070\046\001\002\000" +
    "\004\046\053\001\002\000\010\011\uffeb\040\uffeb\044\uffeb" +
    "\001\002\000\010\011\ufffd\040\051\044\ufffd\001\002\000" +
    "\004\070\046\001\002\000\010\011\uffec\040\uffec\044\uffec" +
    "\001\002\000\020\006\022\007\021\047\024\050\023\051" +
    "\020\061\025\070\016\001\002\000\010\011\uffea\040\uffea" +
    "\044\uffea\001\002\000\004\044\072\001\002\000\004\012" +
    "\060\001\002\000\006\040\uffe8\044\uffe8\001\002\000\004" +
    "\070\064\001\002\000\006\040\062\044\ufffb\001\002\000" +
    "\004\012\060\001\002\000\006\040\uffe9\044\uffe9\001\002" +
    "\000\004\042\065\001\002\000\010\043\232\056\231\070" +
    "\230\001\002\000\012\005\007\010\ufffe\011\ufffe\044\ufffe" +
    "\001\002\000\010\010\045\011\ufffc\044\ufffc\001\002\000" +
    "\006\011\056\044\ufffa\001\002\000\004\044\072\001\002" +
    "\000\024\013\101\015\105\044\072\045\104\062\076\063" +
    "\102\064\112\065\115\070\103\001\002\000\006\040\uffe7" +
    "\044\uffe7\001\002\000\006\040\uffdb\045\uffdb\001\002\000" +
    "\006\040\uffd8\045\uffd8\001\002\000\004\070\120\001\002" +
    "\000\012\031\225\052\124\054\123\055\122\001\002\000" +
    "\006\040\uffdd\045\uffdd\001\002\000\026\020\127\026\140" +
    "\027\130\030\133\042\131\057\132\060\135\066\134\067" +
    "\136\070\120\001\002\000\026\020\127\026\140\027\130" +
    "\030\133\042\131\057\132\060\135\066\134\067\136\070" +
    "\120\001\002\000\014\031\uffc4\042\213\052\uffc4\054\uffc4" +
    "\055\uffc4\001\002\000\020\002\uffd5\014\uffd5\016\uffd5\040" +
    "\uffd5\044\uffd5\045\uffd5\052\uffd5\001\002\000\026\020\127" +
    "\026\140\027\130\030\133\042\131\057\132\060\135\066" +
    "\134\067\136\070\120\001\002\000\006\040\uffdc\045\uffdc" +
    "\001\002\000\006\040\uffd3\045\uffd3\001\002\000\006\040" +
    "\uffdf\045\uffdf\001\002\000\006\040\uffde\045\uffde\001\002" +
    "\000\004\070\120\001\002\000\006\040\uffda\045\uffda\001" +
    "\002\000\006\040\176\045\175\001\002\000\004\070\120" +
    "\001\002\000\006\040\uffd9\045\uffd9\001\002\000\006\040" +
    "\uffe0\045\uffe0\001\002\000\056\017\uffc4\020\uffc4\021\uffc4" +
    "\022\uffc4\023\uffc4\024\uffc4\025\uffc4\032\uffc4\033\uffc4\034" +
    "\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\043\uffc4" +
    "\045\uffc4\046\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\001" +
    "\002\000\014\040\uffc9\045\uffc9\052\124\054\123\055\122" +
    "\001\002\000\060\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023" +
    "\uffc1\024\uffc1\025\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1" +
    "\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\043\uffc1\045" +
    "\uffc1\046\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\001\002" +
    "\000\004\070\174\001\002\000\026\020\127\026\140\027" +
    "\130\030\133\042\131\057\132\060\135\066\134\067\136" +
    "\070\120\001\002\000\004\053\173\001\002\000\026\020" +
    "\127\026\140\027\130\030\133\042\131\057\132\060\135" +
    "\066\134\067\136\070\120\001\002\000\026\020\uffa4\026" +
    "\uffa4\027\uffa4\030\uffa4\042\uffa4\057\uffa4\060\uffa4\066\uffa4" +
    "\067\uffa4\070\uffa4\001\002\000\026\020\uffa2\026\uffa2\027" +
    "\uffa2\030\uffa2\042\uffa2\057\uffa2\060\uffa2\066\uffa2\067\uffa2" +
    "\070\uffa2\001\002\000\026\020\127\026\140\027\130\030" +
    "\133\042\131\057\132\060\135\066\134\067\136\070\120" +
    "\001\002\000\050\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023" +
    "\uffb8\024\uffb8\025\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8" +
    "\036\uffb8\037\uffb8\040\uffb8\041\uffb8\043\uffb8\045\uffb8\046" +
    "\uffb8\053\uffb8\001\002\000\026\020\uffa5\026\uffa5\027\uffa5" +
    "\030\uffa5\042\uffa5\057\uffa5\060\uffa5\066\uffa5\067\uffa5\070" +
    "\uffa5\001\002\000\050\017\uffb6\020\uffb6\021\uffb6\022\uffb6" +
    "\023\uffb6\024\uffb6\025\uffb6\032\uffb6\033\uffb6\034\uffb6\035" +
    "\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\043\uffb6\045\uffb6" +
    "\046\uffb6\053\uffb6\001\002\000\050\017\uffb7\020\uffb7\021" +
    "\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\032\uffb7\033\uffb7" +
    "\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\043" +
    "\uffb7\045\uffb7\046\uffb7\053\uffb7\001\002\000\050\017\uffb5" +
    "\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\032" +
    "\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5" +
    "\041\uffb5\043\uffb5\045\uffb5\046\uffb5\053\uffb5\001\002\000" +
    "\056\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4" +
    "\025\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037" +
    "\uffb4\040\uffb4\041\uffb4\043\uffb4\045\uffb4\046\uffb4\052\124" +
    "\053\uffb4\054\123\055\122\001\002\000\026\020\uffa3\026" +
    "\uffa3\027\uffa3\030\uffa3\042\uffa3\057\uffa3\060\uffa3\066\uffa3" +
    "\067\uffa3\070\uffa3\001\002\000\050\017\uffb9\020\uffb9\021" +
    "\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\032\uffb9\033\uffb9" +
    "\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\043" +
    "\uffb9\045\uffb9\046\uffb9\053\uffb9\001\002\000\050\017\uffbb" +
    "\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\032" +
    "\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb" +
    "\041\uffbb\043\uffbb\045\uffbb\046\uffbb\053\uffbb\001\002\000" +
    "\050\017\uffbd\020\uffbd\021\165\022\164\023\161\024\163" +
    "\025\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037" +
    "\uffbd\040\uffbd\041\uffbd\043\uffbd\045\uffbd\046\uffbd\053\uffbd" +
    "\001\002\000\040\017\152\020\146\025\157\032\155\033" +
    "\150\034\154\035\145\036\147\037\156\040\uffbf\041\uffbf" +
    "\043\uffbf\045\uffbf\046\uffbf\053\uffbf\001\002\000\026\020" +
    "\uffad\026\uffad\027\uffad\030\uffad\042\uffad\057\uffad\060\uffad" +
    "\066\uffad\067\uffad\070\uffad\001\002\000\026\020\uffab\026" +
    "\uffab\027\uffab\030\uffab\042\uffab\057\uffab\060\uffab\066\uffab" +
    "\067\uffab\070\uffab\001\002\000\026\020\uffaf\026\uffaf\027" +
    "\uffaf\030\uffaf\042\uffaf\057\uffaf\060\uffaf\066\uffaf\067\uffaf" +
    "\070\uffaf\001\002\000\026\020\uffae\026\uffae\027\uffae\030" +
    "\uffae\042\uffae\057\uffae\060\uffae\066\uffae\067\uffae\070\uffae" +
    "\001\002\000\026\020\127\026\140\027\130\030\133\042" +
    "\131\057\132\060\135\066\134\067\136\070\120\001\002" +
    "\000\026\020\uffaa\026\uffaa\027\uffaa\030\uffaa\042\uffaa\057" +
    "\uffaa\060\uffaa\066\uffaa\067\uffaa\070\uffaa\001\002\000\026" +
    "\020\127\026\140\027\130\030\133\042\131\057\132\060" +
    "\135\066\134\067\136\070\120\001\002\000\026\020\uffb0" +
    "\026\uffb0\027\uffb0\030\uffb0\042\uffb0\057\uffb0\060\uffb0\066" +
    "\uffb0\067\uffb0\070\uffb0\001\002\000\026\020\uffb2\026\uffb2" +
    "\027\uffb2\030\uffb2\042\uffb2\057\uffb2\060\uffb2\066\uffb2\067" +
    "\uffb2\070\uffb2\001\002\000\026\020\uffb1\026\uffb1\027\uffb1" +
    "\030\uffb1\042\uffb1\057\uffb1\060\uffb1\066\uffb1\067\uffb1\070" +
    "\uffb1\001\002\000\026\020\uffac\026\uffac\027\uffac\030\uffac" +
    "\042\uffac\057\uffac\060\uffac\066\uffac\067\uffac\070\uffac\001" +
    "\002\000\050\017\uffbe\020\uffbe\021\165\022\164\023\161" +
    "\024\163\025\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036" +
    "\uffbe\037\uffbe\040\uffbe\041\uffbe\043\uffbe\045\uffbe\046\uffbe" +
    "\053\uffbe\001\002\000\026\020\uffa8\026\uffa8\027\uffa8\030" +
    "\uffa8\042\uffa8\057\uffa8\060\uffa8\066\uffa8\067\uffa8\070\uffa8" +
    "\001\002\000\026\020\127\026\140\027\130\030\133\042" +
    "\131\057\132\060\135\066\134\067\136\070\120\001\002" +
    "\000\026\020\uffa9\026\uffa9\027\uffa9\030\uffa9\042\uffa9\057" +
    "\uffa9\060\uffa9\066\uffa9\067\uffa9\070\uffa9\001\002\000\026" +
    "\020\uffa7\026\uffa7\027\uffa7\030\uffa7\042\uffa7\057\uffa7\060" +
    "\uffa7\066\uffa7\067\uffa7\070\uffa7\001\002\000\026\020\uffa6" +
    "\026\uffa6\027\uffa6\030\uffa6\042\uffa6\057\uffa6\060\uffa6\066" +
    "\uffa6\067\uffa6\070\uffa6\001\002\000\050\017\uffbc\020\uffbc" +
    "\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\032\uffbc\033" +
    "\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc" +
    "\043\uffbc\045\uffbc\046\uffbc\053\uffbc\001\002\000\024\017" +
    "\152\020\146\025\157\040\uffc0\041\uffc0\043\uffc0\045\uffc0" +
    "\046\uffc0\053\uffc0\001\002\000\004\043\171\001\002\000" +
    "\050\017\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3" +
    "\025\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036\uffb3\037" +
    "\uffb3\040\uffb3\041\uffb3\043\uffb3\045\uffb3\046\uffb3\053\uffb3" +
    "\001\002\000\050\017\uffba\020\uffba\021\uffba\022\uffba\023" +
    "\uffba\024\uffba\025\uffba\032\uffba\033\uffba\034\uffba\035\uffba" +
    "\036\uffba\037\uffba\040\uffba\041\uffba\043\uffba\045\uffba\046" +
    "\uffba\053\uffba\001\002\000\060\017\uffc3\020\uffc3\021\uffc3" +
    "\022\uffc3\023\uffc3\024\uffc3\025\uffc3\031\uffc3\032\uffc3\033" +
    "\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3" +
    "\043\uffc3\045\uffc3\046\uffc3\052\uffc3\053\uffc3\054\uffc3\055" +
    "\uffc3\001\002\000\060\017\uffc2\020\uffc2\021\uffc2\022\uffc2" +
    "\023\uffc2\024\uffc2\025\uffc2\031\uffc2\032\uffc2\033\uffc2\034" +
    "\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\043\uffc2" +
    "\045\uffc2\046\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\001" +
    "\002\000\020\002\uffd6\014\uffd6\016\uffd6\040\uffd6\044\uffd6" +
    "\045\uffd6\052\uffd6\001\002\000\022\013\101\015\105\044" +
    "\072\062\076\063\102\064\112\065\115\070\103\001\002" +
    "\000\006\040\uffd4\045\uffd4\001\002\000\014\040\uffca\045" +
    "\uffca\052\124\054\123\055\122\001\002\000\010\014\uffd0" +
    "\016\uffd0\052\uffd0\001\002\000\006\016\207\052\206\001" +
    "\002\000\004\046\204\001\002\000\004\044\072\001\002" +
    "\000\010\014\uffcf\016\uffcf\052\uffcf\001\002\000\004\053" +
    "\210\001\002\000\006\040\uffce\045\uffce\001\002\000\026" +
    "\020\127\026\140\027\130\030\133\042\131\057\132\060" +
    "\135\066\134\067\136\070\120\001\002\000\010\014\uffd1" +
    "\016\uffd1\052\uffd1\001\002\000\006\040\uffcd\045\uffcd\001" +
    "\002\000\030\020\127\026\140\027\130\030\133\042\131" +
    "\043\214\057\132\060\135\066\134\067\136\070\120\001" +
    "\002\000\006\040\uffc7\045\uffc7\001\002\000\006\041\217" +
    "\043\220\001\002\000\006\041\uffc5\043\uffc5\001\002\000" +
    "\026\020\127\026\140\027\130\030\133\042\131\057\132" +
    "\060\135\066\134\067\136\070\120\001\002\000\006\040" +
    "\uffc8\045\uffc8\001\002\000\006\041\uffc6\043\uffc6\001\002" +
    "\000\006\040\uffcb\045\uffcb\001\002\000\006\014\224\052" +
    "\206\001\002\000\006\040\uffd2\045\uffd2\001\002\000\026" +
    "\020\127\026\140\027\130\030\133\042\131\057\132\060" +
    "\135\066\134\067\136\070\120\001\002\000\006\040\uffd7" +
    "\045\uffd7\001\002\000\014\040\uffcc\045\uffcc\052\124\054" +
    "\123\055\122\001\002\000\004\046\243\001\002\000\004" +
    "\070\240\001\002\000\012\005\uffe5\010\uffe5\011\uffe5\044" +
    "\uffe5\001\002\000\006\041\235\043\236\001\002\000\006" +
    "\041\uffe3\043\uffe3\001\002\000\006\056\231\070\230\001" +
    "\002\000\012\005\uffe6\010\uffe6\011\uffe6\044\uffe6\001\002" +
    "\000\006\041\uffe4\043\uffe4\001\002\000\004\046\241\001" +
    "\002\000\020\006\022\007\021\047\024\050\023\051\020" +
    "\061\025\070\016\001\002\000\006\041\uffe1\043\uffe1\001" +
    "\002\000\020\006\022\007\021\047\024\050\023\051\020" +
    "\061\025\070\016\001\002\000\006\041\uffe2\043\uffe2\001" +
    "\002\000\004\002\001\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\244\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\005\001\001\000\004\004\043\001\001\000\006" +
    "\006\011\011\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\013\001\001\000\002" +
    "\001\001\000\004\012\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\033\014" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\037\001\001\000" +
    "\002\001\001\000\004\012\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\054\001\001\000\006\007" +
    "\047\015\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\051\001\001\000\002\001" +
    "\001\000\004\012\053\001\001\000\002\001\001\000\004" +
    "\026\244\001\001\000\006\010\060\016\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\062\001\001\000\002\001\001\000\004\017\065\001" +
    "\001\000\006\020\232\021\233\001\001\000\004\003\066" +
    "\001\001\000\004\004\067\001\001\000\004\005\070\001" +
    "\001\000\004\026\072\001\001\000\032\022\106\023\116" +
    "\024\110\025\077\026\107\027\105\030\073\031\112\032" +
    "\115\033\074\034\076\042\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\226\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\034\136" +
    "\035\202\036\143\037\142\040\141\041\140\043\222\044" +
    "\200\052\125\001\001\000\020\034\136\035\221\036\143" +
    "\037\142\040\141\041\140\052\125\001\001\000\004\045" +
    "\211\001\001\000\002\001\001\000\024\034\136\035\202" +
    "\036\143\037\142\040\141\041\140\043\201\044\200\052" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\034\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\034\136\035\124\036\143\037\142\040\141\041\140\052" +
    "\125\001\001\000\002\001\001\000\012\034\136\040\171" +
    "\041\140\052\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\034\136\035\167\036\143\037\142\040\141" +
    "\041\140\052\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\161\001\001\000\006\047\150" +
    "\050\152\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\034\136\036\166" +
    "\037\142\040\141\041\140\052\125\001\001\000\002\001" +
    "\001\000\014\034\136\037\157\040\141\041\140\052\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\161\001\001\000\002" +
    "\001\001\000\012\034\136\040\165\041\140\052\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\050\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\022\176\023" +
    "\116\024\110\025\077\026\107\027\105\030\073\031\112" +
    "\032\115\033\074\034\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\204\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\034\136\035\202" +
    "\036\143\037\142\040\141\041\140\044\210\052\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\034\136" +
    "\035\215\036\143\037\142\040\141\041\140\046\214\052" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\034\136\035\220\036\143\037\142\040" +
    "\141\041\140\052\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\034\136\035\225\036\143\037\142\040\141" +
    "\041\140\052\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\236\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\241\001\001\000\002\001\001\000\004\012" +
    "\243\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   alex = (AnalizadorLexicoTiny) getScanner();
   alex.fijaGestionErrores(errores);
   constructora = new Constructoras();

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
   
   static IConstructoras constructora;
   static AnalizadorLexicoTiny alex;
   static Programa root;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= PROGRAM SeccionTipos SeccionVariables SeccionSubprogramas IBloque 
            {
              Object RESULT =null;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Object sv = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Object ib = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 
	RESULT = AnalizadorSintacticoTiny.root = AnalizadorSintacticoTiny.constructora
					.prog((List<DecTipo>)st, (List<DecVariable>)sv, (List<DecSubprograma>)ss, (Bloque)ib); 
	AnalizadorSintacticoTiny.
	constructora.ponNumeroLinea(AnalizadorSintacticoTiny.root, AnalizadorSintacticoTiny.alex.fila());	
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SeccionTipos ::= TYPES DecTipos 
            {
              Object RESULT =null;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = dt; 
	AnalizadorSintacticoTiny.
	constructora.ponNumeroLinea(dt, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SeccionTipos",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SeccionTipos ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SeccionTipos",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SeccionVariables ::= VARIABLES DecVariables 
            {
              Object RESULT =null;
		Object dv = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = dv;
	AnalizadorSintacticoTiny.
	constructora.ponNumeroLinea(dv, AnalizadorSintacticoTiny.alex.fila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SeccionVariables",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SeccionVariables ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SeccionVariables",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SeccionSubprogramas ::= SUBPROGRAMS DecSubprogramas 
            {
              Object RESULT =null;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = ds;
	AnalizadorSintacticoTiny.
	constructora.ponNumeroLinea(ds, AnalizadorSintacticoTiny.alex.fila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SeccionSubprogramas",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SeccionSubprogramas ::= 
            {
              Object RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SeccionSubprogramas",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DecTipos ::= DecTipos PYCOMA DecTipo 
            {
              Object RESULT =null;
		Object dts = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 
		List<DecTipo> dtsReal = (List<DecTipo>) dts;
		DecTipo dtReal = (DecTipo) dt;
	AnalizadorSintacticoTiny.
	constructora.ponNumeroLinea(dt, AnalizadorSintacticoTiny.alex.fila());
		RESULT = AnalizadorSintacticoTiny.constructora.HazListaDecTipos(dtsReal, dtReal); 
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DecTipos",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DecTipos ::= DecTipo 
            {
              Object RESULT =null;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 
		DecTipo dtReal = (DecTipo) dt;
	AnalizadorSintacticoTiny.
	constructora.ponNumeroLinea(dt, AnalizadorSintacticoTiny.alex.fila());
		RESULT = AnalizadorSintacticoTiny.constructora.HazListaDecTipos(dtReal); 
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DecTipos",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DecTipo ::= ID DOSPUNTOS Tipo 
            {
              Object RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 
		RESULT = AnalizadorSintacticoTiny.constructora.crearDecTipo(id, (Tipo) tipo);
	AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila()); 
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DecTipo",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Tipo ::= INT 
            {
              Object RESULT =null;
		 
		RESULT = AnalizadorSintacticoTiny.constructora.crearInteger(); 
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Tipo ::= DOUBLE 
            {
              Object RESULT =null;
		 
		RESULT = AnalizadorSintacticoTiny.constructora.crearDouble(); 
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());	
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Tipo ::= BOOLEAN 
            {
              Object RESULT =null;
		 
		RESULT = AnalizadorSintacticoTiny.constructora.crearBoolean(); 
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Tipo ::= ID 
            {
              Object RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 
		RESULT = AnalizadorSintacticoTiny.constructora.crearID(id);
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Tipo ::= ARRAY Tipo CAP NUMERO_NATURAL CCIERRE 
            {
              Object RESULT =null;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		String cap = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 
		RESULT = AnalizadorSintacticoTiny.constructora.crearArray((Tipo) tipo, Integer.valueOf((String)cap)); 
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Tipo ::= STRUCT LLAVEAP Campos LLAVECIERRE 
            {
              Object RESULT =null;
		Object campos = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 			
		List<DecTipo> camposReal = (List<DecTipo>) campos;
		RESULT = AnalizadorSintacticoTiny.constructora.crearReg(camposReal); 
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Tipo ::= POINTER Tipo 
            {
              Object RESULT =null;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 	
		RESULT = AnalizadorSintacticoTiny.constructora.crearPointer((Tipo) tipo); 
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Campos ::= Campos PYCOMA Campo 
            {
              Object RESULT =null;
		Object cpos = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 
		List<DecTipo> nuevosCampos = (List<DecTipo>) cpos; 
		DecTipo camposReal = (DecTipo) c;
		RESULT = AnalizadorSintacticoTiny.constructora.HazListaCampos(nuevosCampos, camposReal); 
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Campos",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Campos ::= Campo 
            {
              Object RESULT =null;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 	
		RESULT = AnalizadorSintacticoTiny.constructora.HazListaCampos((DecTipo) c); 
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Campos",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Campo ::= ID DOSPUNTOS Tipo 
            {
              Object RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 
		RESULT = AnalizadorSintacticoTiny.constructora.HazCampo(id, (Tipo) tipo); 
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Campo",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DecVariables ::= DecVariables PYCOMA DecVariable 
            {
              Object RESULT =null;
		Object dvs = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Object dv = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		
		 List<DecVariable> dvsReal = (List<DecVariable>) dvs;
		 DecVariable dvReal = (DecVariable) dv;
		 AnalizadorSintacticoTiny.constructora.ponNumeroLinea(dv, AnalizadorSintacticoTiny.alex.fila());
		 RESULT = AnalizadorSintacticoTiny.constructora.HazListaDecVariables(dvsReal, dvReal); 
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DecVariables",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DecVariables ::= DecVariable 
            {
              Object RESULT =null;
		Object dv = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		
		 DecVariable dvReal = (DecVariable) dv;
		 AnalizadorSintacticoTiny.constructora.ponNumeroLinea(dv, AnalizadorSintacticoTiny.alex.fila());
		 RESULT = AnalizadorSintacticoTiny.constructora.HazListaDecVariables(dvReal); 
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DecVariables",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DecVariable ::= ID DOSPUNTOS Tipo 
            {
              Object RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
				
		 RESULT = AnalizadorSintacticoTiny.constructora.crearDecVariable(id, (Tipo)tipo); 
		 AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DecVariable",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DecSubprogramas ::= DecSubprogramas PYCOMA DecSubprograma 
            {
              Object RESULT =null;
		Object dss = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
				
		 List<DecSubprograma> dssReal = (List<DecSubprograma>) dss;
		 DecSubprograma dsReal = (DecSubprograma) ds;
		 RESULT = AnalizadorSintacticoTiny.constructora.HazListaProcs(dssReal, dsReal); 
		 AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DecSubprogramas",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DecSubprogramas ::= DecSubprograma 
            {
              Object RESULT =null;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
				
		 DecSubprograma dsReal = (DecSubprograma) ds;
		 RESULT = AnalizadorSintacticoTiny.constructora.HazListaProcs(dsReal); 
		 AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila()); 
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DecSubprogramas",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DecSubprograma ::= SUBPROGRAM ID Parametros SeccionTipos SeccionVariables SeccionSubprogramas IBloque 
            {
              Object RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Object tipos = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Object vars = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Object bloque = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
				
		 RESULT = AnalizadorSintacticoTiny.constructora.crearDecSubprograma(id, ((List<Parametro>) params), 
					AnalizadorSintacticoTiny.constructora.prog((List<DecTipo>)tipos, 
					(List<DecVariable>)vars, (List<DecSubprograma>)ss, (Bloque)bloque)); 
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("DecSubprograma",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Parametros ::= PAP ListaParametros PCIERRE 
            {
              Object RESULT =null;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		
		RESULT = lp;
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Parametros",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Parametros ::= PAP PCIERRE 
            {
              Object RESULT =null;
		
		RESULT = null;
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Parametros",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ListaParametros ::= ListaParametros COMA Parametro 
            {
              Object RESULT =null;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		
		List<Parametro> pars = (ArrayList<Parametro>) lp;
		Parametro par = (Parametro) p;
		RESULT = AnalizadorSintacticoTiny.constructora.HazListaParametros(pars, par);
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaParametros",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ListaParametros ::= Parametro 
            {
              Object RESULT =null;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		
		Parametro par = (Parametro) p;
		RESULT = AnalizadorSintacticoTiny.constructora.HazListaParametros(par);
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaParametros",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Parametro ::= ID DOSPUNTOS Tipo 
            {
              Object RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		
		RESULT = AnalizadorSintacticoTiny.constructora.HazParametroValor(id, (Tipo) tipo);
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Parametro",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Parametro ::= AMP ID DOSPUNTOS Tipo 
            {
              Object RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		
		RESULT = AnalizadorSintacticoTiny.constructora.HazParametroVariable(id, (Tipo) tipo);
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Parametro",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Instruccion ::= IAsig 
            {
              Object RESULT =null;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 
		RESULT = ins; 	
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Instruccion ::= IBloque 
            {
              Object RESULT =null;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 
		RESULT = ins; 	
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Instruccion ::= ICond 
            {
              Object RESULT =null;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 
		RESULT = ins; 	
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Instruccion ::= IBucle 
            {
              Object RESULT =null;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 
		RESULT = ins; 	
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Instruccion ::= ILlamada 
            {
              Object RESULT =null;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 
		RESULT = ins; 	
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Instruccion ::= IRead 
            {
              Object RESULT =null;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 
		RESULT = ins; 	
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Instruccion ::= IWrite 
            {
              Object RESULT =null;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 
		RESULT = ins; 	
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Instruccion ::= INew 
            {
              Object RESULT =null;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 
		RESULT = ins; 	
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Instruccion ::= IDelete 
            {
              Object RESULT =null;
		Object ins = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 
		RESULT = ins; 
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());	
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instruccion",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IAsig ::= Designador ASIG Exp0 
            {
              Object RESULT =null;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		
		RESULT = AnalizadorSintacticoTiny.constructora.crearAsignacion((Designador)ds, (Expresion)e);
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IAsig",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IBloque ::= LLAVEAP Instrucciones LLAVECIERRE 
            {
              Object RESULT =null;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		
		RESULT = AnalizadorSintacticoTiny.constructora.crearBloque((List<Instruccion>) inst);		
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IBloque",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IBloque ::= LLAVEAP LLAVECIERRE 
            {
              Object RESULT =null;
		
		RESULT = null;
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IBloque",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Instrucciones ::= Instrucciones PYCOMA Instruccion 
            {
              Object RESULT =null;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		
		RESULT = AnalizadorSintacticoTiny.constructora.HazListaInstrucciones((List<Instruccion>)inst, (Instruccion)i);
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Instrucciones ::= Instruccion 
            {
              Object RESULT =null;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		
		RESULT = AnalizadorSintacticoTiny.constructora.HazListaInstrucciones((Instruccion)i);
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Instrucciones",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ICond ::= IF Casos ENDIF 
            {
              Object RESULT =null;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		
		RESULT = AnalizadorSintacticoTiny.constructora.crearIf((List<Caso>) c);	
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ICond",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Casos ::= Casos CAP CCIERRE Caso 
            {
              Object RESULT =null;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Object ca = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		
		RESULT = AnalizadorSintacticoTiny.constructora.HazListaCasos((List<Caso>) cs, (Caso) ca);		
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());	
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Casos",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Casos ::= Caso 
            {
              Object RESULT =null;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		
		RESULT = AnalizadorSintacticoTiny.constructora.HazListaCasos((Caso) c);		
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());	
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Casos",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Caso ::= Exp0 DOSPUNTOS IBloque 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		
		RESULT = AnalizadorSintacticoTiny.constructora.HazCaso((Expresion) e, (Bloque) b);			
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Caso",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IBucle ::= DO Casos ENDDO 
            {
              Object RESULT =null;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		
		RESULT = AnalizadorSintacticoTiny.constructora.crearBucle((List<Caso>) c);	
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());	
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IBucle",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ILlamada ::= ID Argumentos 
            {
              Object RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
				
		if (args != null){	
			RESULT = AnalizadorSintacticoTiny.constructora.crearLlamada(id, (List<Expresion>) args);		
		} else {		
			RESULT = AnalizadorSintacticoTiny.constructora.crearLlamada(id);
		}
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ILlamada",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IRead ::= READ Designador 
            {
              Object RESULT =null;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		
		RESULT = AnalizadorSintacticoTiny.constructora.crearLee((Designador) d); 
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IRead",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IWrite ::= WRITE Exp0 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 
		RESULT = AnalizadorSintacticoTiny.constructora.crearEscribe((Expresion) e); 
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IWrite",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INew ::= NEW Designador 
            {
              Object RESULT =null;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		
	 	RESULT = AnalizadorSintacticoTiny.constructora.crearNuevo((Designador) d); 
	 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INew",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IDelete ::= DELETE Designador 
            {
              Object RESULT =null;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 
		RESULT = AnalizadorSintacticoTiny.constructora.crearDelete((Designador) d); 
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("IDelete",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Argumentos ::= PAP ListaArgumentos PCIERRE 
            {
              Object RESULT =null;
		Object la = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		
		RESULT = la;
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Argumentos",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Argumentos ::= PAP PCIERRE 
            {
              Object RESULT =null;
		
		RESULT = null;	
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Argumentos",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ListaArgumentos ::= ListaArgumentos COMA Exp0 
            {
              Object RESULT =null;
		Object la = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
			
		RESULT = AnalizadorSintacticoTiny.constructora.HazListaArgumentos((List<Expresion>)la, (Expresion)e);
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaArgumentos",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ListaArgumentos ::= Exp0 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		
		RESULT = AnalizadorSintacticoTiny.constructora.HazListaArgumentos((Expresion)e);
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaArgumentos",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Designador ::= ID 
            {
              Object RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 
		RESULT = AnalizadorSintacticoTiny.constructora.creaDesignador(id); 
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Designador",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Designador ::= Designador CAP Exp0 CCIERRE 
            {
              Object RESULT =null;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 
		RESULT = AnalizadorSintacticoTiny.constructora.creaDesignador((Designador)d, (Expresion)e); 
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Designador",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Designador ::= Designador PUNTO ID 
            {
              Object RESULT =null;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 	
		RESULT = AnalizadorSintacticoTiny.constructora.creaDesignador((Designador)d, id); 
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Designador",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Designador ::= Designador FLECHA 
            {
              Object RESULT =null;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 
		RESULT = AnalizadorSintacticoTiny.constructora.creaDesignador((Designador)d); 
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Designador",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Exp0 ::= Exp1 OpComp Exp1 
            {
              Object RESULT =null;
		Object e0 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = AnalizadorSintacticoTiny.constructora.creaExpresionBinaria((Expresion) e0,
																   (OpBinario) op,
																   (Expresion) e1);
																   
	 AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
																    
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Exp0 ::= Exp1 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = e; 
		 AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Exp1 ::= Exp1 OpAditivo Exp2 
            {
              Object RESULT =null;
		Object e0 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = AnalizadorSintacticoTiny.constructora.creaExpresionBinaria((Expresion) e0,
																   (OpBinario) op,
																   (Expresion) e1); 
		 AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());															   
	
																   
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Exp1 ::= Exp2 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 
	RESULT = e; 
		 AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Exp2 ::= Exp2 OpMultiplicativo Exp3 
            {
              Object RESULT =null;
		Object e0 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = AnalizadorSintacticoTiny.constructora.creaExpresionBinaria((Expresion) e0,
																   (OpBinario) op,
																   (Expresion) e1); 
 AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
																   
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Exp2 ::= Exp3 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 
		RESULT = e; 
		 AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Exp3 ::= OpUnario Exp3 
            {
              Object RESULT =null;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Object e0 = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = AnalizadorSintacticoTiny.constructora.creaExpUnaria((OpUnario) op,
																   (Expresion) e0); 
		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
																   
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Exp3 ::= Exp4 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 
	 	RESULT = e; 
		 AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());
	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Exp4 ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = AnalizadorSintacticoTiny.constructora.creaExpBoolean(true);
		 AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Exp4 ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = AnalizadorSintacticoTiny.constructora.creaExpBoolean(false);
		 AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Exp4 ::= NUMERO_NATURAL 
            {
              Object RESULT =null;
		String v = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = AnalizadorSintacticoTiny.constructora.creaExpInteger(Integer.valueOf((String)v));
		 AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Exp4 ::= NUMERO_REAL 
            {
              Object RESULT =null;
		String v = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = AnalizadorSintacticoTiny.constructora.creaExpDouble(Double.valueOf((String)v));
		 AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Exp4 ::= Designador 
            {
              Object RESULT =null;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = AnalizadorSintacticoTiny.constructora.creaExpDesig((Designador)d);
		 AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Exp4 ::= PAP Exp0 PCIERRE 
            {
              Object RESULT =null;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 
 		RESULT = e;
 		AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila()); 	
 	
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OpComp ::= IGUAL 
            {
              Object RESULT =null;
		 RESULT = AnalizadorSintacticoTiny.constructora.crearOperadorComp();
		 AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila());  AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OpComp",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OpComp ::= DISTINTO 
            {
              Object RESULT =null;
		 RESULT = AnalizadorSintacticoTiny.constructora.crearOpDistinto();  AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OpComp",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OpComp ::= MAYOR 
            {
              Object RESULT =null;
		 RESULT = AnalizadorSintacticoTiny.constructora.crearOpMayor();  AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OpComp",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OpComp ::= MAYOROIGUAL 
            {
              Object RESULT =null;
		 RESULT = AnalizadorSintacticoTiny.constructora.crearOpMayorOIgual();  AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OpComp",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OpComp ::= MENOR 
            {
              Object RESULT =null;
		 RESULT = AnalizadorSintacticoTiny.constructora.crearOpMenor();  AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OpComp",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OpComp ::= MENOROIGUAL 
            {
              Object RESULT =null;
		 RESULT = AnalizadorSintacticoTiny.constructora.crearOpMenorOIgual();  AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OpComp",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OpAditivo ::= OR 
            {
              Object RESULT =null;
		 RESULT = AnalizadorSintacticoTiny.constructora.crearOpOr();  AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OpAditivo",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OpAditivo ::= MENOS 
            {
              Object RESULT =null;
		 RESULT = AnalizadorSintacticoTiny.constructora.crearOpMenos();  AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OpAditivo",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OpAditivo ::= MAS 
            {
              Object RESULT =null;
		 RESULT = AnalizadorSintacticoTiny.constructora.crearOpMas();  AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OpAditivo",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OpMultiplicativo ::= AND 
            {
              Object RESULT =null;
		 RESULT = AnalizadorSintacticoTiny.constructora.crearOpAnd();  AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OpMultiplicativo",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OpMultiplicativo ::= MOD 
            {
              Object RESULT =null;
		 RESULT = AnalizadorSintacticoTiny.constructora.crearOpMod();  AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OpMultiplicativo",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OpMultiplicativo ::= DIV 
            {
              Object RESULT =null;
		 RESULT = AnalizadorSintacticoTiny.constructora.crearOpDiv();  AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OpMultiplicativo",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OpMultiplicativo ::= POR 
            {
              Object RESULT =null;
		 RESULT = AnalizadorSintacticoTiny.constructora.crearOpMult();  AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OpMultiplicativo",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OpUnario ::= TODOUBLE 
            {
              Object RESULT =null;
		 RESULT = AnalizadorSintacticoTiny.constructora.crearOpToDouble();  AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OpUnario",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OpUnario ::= MENOS 
            {
              Object RESULT =null;
		 RESULT = AnalizadorSintacticoTiny.constructora.crearOpMenosUna();  AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OpUnario",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OpUnario ::= NOT 
            {
              Object RESULT =null;
		 RESULT = AnalizadorSintacticoTiny.constructora.crearOpNot();  AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OpUnario",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OpUnario ::= TOINT 
            {
              Object RESULT =null;
		 RESULT = AnalizadorSintacticoTiny.constructora.crearOpToInt();  AnalizadorSintacticoTiny.constructora.ponNumeroLinea(RESULT, AnalizadorSintacticoTiny.alex.fila()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OpUnario",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

